# streamlit_app.py

import streamlit as st
import os
from dotenv import load_dotenv
from trip_planner_core import supervisor, convert_to_messages, get_graph_image
from jinja2 import Template

# Load environment variables
load_dotenv()

# Hide LangGraph warnings
import logging
logging.getLogger("langgraph").setLevel(logging.ERROR)


# Jinja2 Template for PDF
template_str = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Trip Plan</title>
    <style>
        body { font-family: Arial; padding: 40px; background-color: #f9f9f9; }
        h1 { color: #2c3e50; text-align: center; }
        .section { margin-bottom: 20px; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        ul { padding-left: 20px; }
        .highlight { color: green; font-weight: bold; }
        .footer { text-align: center; font-size: 12px; color: gray; margin-top: 30px; }
    </style>
</head>
<body>

<h1>🎉 Final Travel Plan</h1>

<div class="section">
    <h2>📍 Overview</h2>
    <ul>
        <li><strong>Origin:</strong> {{ origin }}</li>
        <li><strong>Dates:</strong> {{ dates }}</li>
        <li><strong>Budget:</strong> {{ currency }}{{ budget }}</li>
        <li><strong>Max Distance:</strong> {{ max_distance_km }} km</li>
    </ul>
</div>

<div class="section">
    <h2>🌆 Destinations</h2>
    <ul>
    {% for dest in destinations %}
        <li>{{ dest.name }} | {{ dest.distance }} km | {{ dest.weather }}</li>
    {% endfor %}
    </ul>
</div>

<div class="section">
    <h2>📌 Recommended Destination</h2>
    <ul>
        <li><strong>Name:</strong> {{ recommended.name }}</li>
        <li><strong>Distance:</strong> {{ recommended.distance }} km</li>
        <li><strong>Weather:</strong> {{ recommended.weather }}</li>
        <li><strong>Avg Temp:</strong> {{ recommended.temp }}°C</li>
    </ul>
</div>

<div class="section">
    <h2>🧮 Budget Breakdown</h2>
    <ul>
        <li><strong>Transportation:</strong> {{ currency }}{{ cost.transport }}</li>
        <li><strong>Accommodation:</strong> {{ currency }}{{ cost.hotel }}</li>
        <li><strong>Food & Activities:</strong> {{ currency }}{{ cost.food }}</li>
        <li><strong>Total:</strong> {{ currency }}{{ cost.total }}</li>
    </ul>
</div>

<div class="footer">
    Generated by AI-powered smart travel assistant • Powered by Groq & LangGraph
</div>

</body>
</html>
"""

def extract_plan_data(output_text: str):
    data = {
        "origin": "Not provided",
        "dates": "Not provided",
        "budget": 0,
        "currency": "PKR",
        "max_distance_km": 500,
        "destinations": [],
        "recommended": {},
        "must_see_places": [],
        "hotels": [],
        "cost": {
            "transport": 0,
            "hotel": 0,
            "food": 0,
            "total": 0
        }
    }

    lines = output_text.splitlines()
    for line in lines:
        if "📍 Origin:" in line:
            try:
                data["origin"] = line.split("📍 Origin:")[1].strip()
            except IndexError:
                pass
        elif "🗓️ Dates:" in line:
            try:
                data["dates"] = line.split("🗓️ Dates:")[1].strip()
            except IndexError:
                pass
        elif "💰 Budget:" in line:
            try:
                budget_line = line.split("💰 Budget:")[1].strip()
                data["currency"] = ''.join(filter(str.isalpha, budget_line))
                budget_value = ''.join(filter(lambda x: x.isdigit() or x == ".", budget_line.split(data["currency"])[1].strip()))
                data["budget"] = float(budget_value) if budget_value else 0
            except Exception as e:
                print(f"[Error] Budget extraction failed: {str(e)}")
        elif "|" in line and "Destinations:" not in line:
            try:
                parts = line.strip("- ").split("|")
                name = parts[0].strip()
                dist = float(parts[1].replace("km", "").strip())
                weather = parts[2].strip()
                data["destinations"].append({"name": name, "distance": dist, "weather": weather})
            except Exception as e:
                print(f"[Debug] Skipping destination line due to: {str(e)}")
                continue
        elif "Recommended Destination:" in line:
            try:
                data["recommended"]["name"] = line.split("Recommended Destination:")[1].strip()
            except IndexError:
                pass
        elif "Distance:" in line and "Recommended" in line:
            try:
                data["recommended"]["distance"] = float(line.split("Distance:")[1].strip().split()[0])
            except IndexError:
                pass
        elif "Average Temp:" in line:
            try:
                data["recommended"]["temp"] = float(line.split("Average Temp:")[1].strip().split("°")[0])
            except IndexError:
                pass
        elif "Weather:" in line and "Recommended" in line:
            try:
                data["recommended"]["weather"] = line.split("Weather:")[1].strip()
            except IndexError:
                pass
        elif "Transportation:" in line:
            try:
                transport_value = line.split(":")[1].strip()
                transport_value = ''.join(filter(str.isdigit, transport_value.split()[1]))
                data["cost"]["transport"] = float(transport_value) if transport_value else 0
            except Exception as e:
                print(f"[Error] Transportation extraction failed: {str(e)}")
                data["cost"]["transport"] = 0
        elif "Accommodation:" in line:
            try:
                hotel_value = line.split(":")[1].strip()
                hotel_value = ''.join(filter(str.isdigit, hotel_value.split()[1]))
                data["cost"]["hotel"] = float(hotel_value) if hotel_value else 0
            except Exception as e:
                print(f"[Error] Accommodation extraction failed: {str(e)}")
                data["cost"]["hotel"] = 0
        elif "Food & Activities:" in line:
            try:
                food_value = line.split(":")[1].strip()
                food_value = ''.join(filter(str.isdigit, food_value.split()[1]))
                data["cost"]["food"] = float(food_value) if food_value else 0
            except Exception as e:
                print(f"[Error] Food cost extraction failed: {str(e)}")
                data["cost"]["food"] = 0
        elif "Total:" in line:
            try:
                total_value = line.split(":")[1].strip()
                total_value = ''.join(filter(str.isdigit, total_value.split()[1]))
                data["cost"]["total"] = float(total_value) if total_value else 0
            except Exception as e:
                print(f"[Error] Total cost extraction failed: {str(e)}")
                data["cost"]["total"] = 0
        elif "Must-see Places in" in line:
            try:
                place_start = line.find("Must-see Places in") + len("Must-see Places in")
                place_line = line[place_start:].split(":")[1].strip()
                data["must_see_places"] = [p.strip() for p in place_line.split(",") if p.strip()]
            except Exception as e:
                data["must_see_places"] = ["Not available"]
        elif "Recommended Hotels:" in line:
            try:
                hotel_start = line.find("Recommended Hotels:") + len("Recommended Hotels:")
                hotel_line = line[hotel_start:].strip()
                data["hotels"] = [h.strip() for h in hotel_line.split(",") if h.strip()]
            except Exception as e:
                data["hotels"] = ["Not available"]

    return data

# Function to generate PDF from plan data
def generate_pdf_plan(data: dict, filename: str = "road_trip_plan.pdf"):
    """
    Generates a PDF from the extracted trip data using Jinja2 template.
    """
    template = Template(template_str)
    rendered_html = template.render(**data)
    
    # Generate PDF
    HTML(string=rendered_html).write_pdf(filename)
    return filename


# Streamlit UI
st.set_page_config(page_title="🚗 AI-powered smart travel assistant", layout="wide")
st.title("🚗 AI-powered smart travel assistant")
st.markdown("Enter your trip plan below:")

# Sidebar for API Keys
with st.sidebar:
    st.header("🔑 API Configuration")
    st.success("API keys loaded from `.env` file.")
    
    # Show graph in sidebar
    st.markdown("### 🧭 Agent Flow Graph")
    graph_img = get_graph_image()
    if graph_img:
        st.image(graph_img, caption="Agent Workflow", use_container_width=True)
    else:
        st.warning("Could not generate graph.")

# User Input Section
user_query = st.text_area("Tell me about your trip:", 
                          placeholder="e.g., 'Plan a 3-day trip from Lahore under PKR 12,000'",
                          height=150)

if st.button("Generate Plan"):
    if not user_query:
        st.error("Please enter your trip details first!")
    else:
        st.info("🔍 Planning your trip... Please wait.")
        seen_content = set()
        output_text = ""

        for chunk in supervisor.stream({"messages": [("user", user_query)]}):
            if isinstance(chunk, tuple):
                ns, update = chunk
                if len(ns) > 0:
                    agent_name = ns[-1].split(":")[0]
                    st.markdown(f"🤖 Update from subgraph `{agent_name}`:")
                    for node, data in update.items():
                        messages = convert_to_messages(data["messages"])
                        for msg in messages:
                            content = msg.pretty_repr()
                            if content not in seen_content:
                                seen_content.add(content)
                                st.code(f"[{node}] {content}")
                    st.markdown("-" * 50)
            else:
                for node, data in chunk.items():
                    st.markdown(f"👨‍🏫 Supervisor Update from Node `{node}`:")
                    messages = convert_to_messages(data["messages"])
                    for msg in messages:
                        content = msg.pretty_repr()
                        if content not in seen_content:
                            seen_content.add(content)
                            st.code(content)
                    st.markdown("-" * 50)

        st.success("✅ Your trip plan is ready!")
        st.markdown("### 🎯 Final Trip Plan")
        st.code(output_text)

        trip_data = extract_plan_data(output_text)

        st.markdown("### 📄 Download as PDF")
        pdf_file = generate_pdf_plan(trip_data)  # <-- Ye line ab chalegi kyunke upar function define he
        with open(pdf_file, "rb") as f:
            st.download_button("📥 Download PDF", f.read(), "road_trip_plan.pdf", mime="application/pdf")
